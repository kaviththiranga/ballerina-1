/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'base'
}

apply from: "$rootDir/gradle/repositories.gradle"

configurations {
    dist {
      transitive false
    }
    distBal {
        transitive false
    }
    langserverLib {
        transitive false
    }
    ballerinaZip {
        transitive false
    }
    composerDistribution {
        transitive false
    }
    composerFonts {
        transitive false
    }
    docerina
    bin
    balSource
    zip
    balo
    resourceFiles
    staticFiles
    balx
    unzipped
    langserverResources
}

dependencies {
    dist 'org.bytedeco:javacpp:1.4.2'
    dist 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
    dist 'com.fasterxml.jackson.core:jackson-core:2.8.6'
    dist 'com.fasterxml.jackson.core:jackson-annotations:2.8.0'
    dist 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.8'
    dist 'org.ow2.asm:asm:6.2.1'

    dist project(':ballerina-cli-utils')
//    dist project(':ballerina-jvm')
    dist project(':ballerina-encoding')
//    dist project(':ballerina-bir')
    dist project(':ballerina-utils')
    dist project(':ballerina-runtime')

    dist project(':testerina:testerina-core')
    
    dist project(':openapi-ballerina:openapi-to-ballerina-generator')
    dist project(':ballerina-backend-jvm')
    dist project(':language-server:language-server-compiler')
    dist project(':ballerina-formatter')
    dist project(':ballerina-packerina')
    dist project(':protobuf-ballerina')
    dist project(':docerina')
    dist project(':openapi-ballerina:openapi-validator')
    dist project(':openapi-ballerina:ballerina-client-generator')
    docerina project(':docerina-gradle-plugin')

    langserverLib project(path: ':language-server:language-server-core', configuration: 'libs')
    langserverLib project(':language-server:language-server-stdio-launcher')
    langserverLib project(':language-server:language-server-core')
    langserverResources project(path: ':language-server:language-server-core', configuration: 'langserverResources')

    balSource project(path: ':ballerina', configuration: 'source')
    distBal project(path: ':ballerina', configuration: 'balo')
    dist project(path: ':ballerina', configuration: 'jar')
    bin project(path: ':ballerina', configuration: 'bin')
    staticFiles project(path: ':ballerina', configuration: 'staticFiles')
    resourceFiles project(path: ':ballerina', configuration: 'resourceFiles')
    composerDistribution project(path: ':composer-library', configuration: 'composer')
    composerFonts project(path: ':composer-library', configuration: 'fonts')

    distBal project(path: ':testerina:testerina-core', configuration: 'baloImplementation')
    balSource project(path: ':testerina:testerina-core', configuration: 'balSource')

    distBal project(path: ':testerina:testerina-core', configuration: 'baloImplementation')
//    distBal project(path: ':ballerina-jvm', configuration: 'baloImplementation')
//    distBal project(path: ':ballerina-bir', configuration: 'baloImplementation')
    distBal project(path: ':ballerina-encoding', configuration: 'baloImplementation')
    distBal project(path: ':ballerina-utils', configuration: 'baloImplementation')

//    balSource project(path: ':ballerina-bir', configuration: 'balSource')
//    balSource project(path: ':ballerina-jvm', configuration: 'balSource')
    balSource project(path: ':ballerina-llvm', configuration: 'balSource')

//    balx project(path: ':metrics-extensions:ballerina-prometheus-extension', configuration: 'balx')
}


def copyJarSpec = {
    base -> copySpec {
        from configurations.dist
        into(base + 'bre/lib')
    }
}

def copyBaloSpec = {
    path -> copySpec {
        from configurations.distBal
        into(path + 'lib')
    }
}

def copyBalxSpec = {
    path -> copySpec {
        from configurations.balx
        into(path + 'lib/balx')
    }
}

def copyStaticSpec = {
    path -> copySpec {
        from configurations.staticFiles
        into(path)
    }
}

def copyResourceSpec = {
    path -> copySpec {
        from configurations.resourceFiles
        into("$path/bre")
    }
}

def copySrcBaloSpec = {
    path -> copySpec {
        from configurations.balSource.files
        into("$path/src")
    }
}

def copyBinSpec = {
    path -> copySpec {
        from configurations.bin
        filter { line -> line.replace('${project.version}', "$project.version") }
        into(path + 'bin')
    }
}

def copyLangServerBinSpec = {
    path -> copySpec {
        from('resources')
        into(path + 'lib/tools/lang-server/launcher')
    }
}

def copyLangSeverIndexSpec = {
    path -> copySpec {
        from configurations.langserverResources
        into(path + 'lib/tools/lang-server/resources')
     }
}

def copyBallerinaZipSpec = {
    path -> copySpec {
        configurations.ballerinaZip.asFileTree.each {
            from(zipTree(it)) { includeEmptyDirs false }
            eachFile { f ->
                f.path = f.path.replaceFirst("ballerina-${project.version}/", '')
            }
        }
        into(path)
    }
}

def copyLangServerLibsSpec = {
    path -> copySpec {
        from configurations.langserverLib
        into(path + 'lib/tools/lang-server/lib')
    }
}

def copyComposerDistributionSpec = {
    path -> copySpec {
        from(configurations.composerDistribution) 
        into(path + 'lib/tools/composer-library')
    }
}

def copyComposerFontsSpec = {
    path -> copySpec {
        from configurations.composerFonts 
        into(path + 'lib/tools/composer-library')
    }
}

def examplesSpec = {
    path -> copySpec {
        from fileTree(project.rootDir.path + '/examples');
        into(path + '/examples')
    }
}

def apiDocsSpec = {
    path -> copySpec {
        from generateDocs.outputs.files
        into("$path/docs")
    }
}

task extractLibs(type: Copy) {
    def path = "$buildDir/ballerina";
    from configurations.balSource.files
    into path
}

// Fix for windows class path too long issue
task pathingJar(type: Jar) {
    appendix = "pathing"
    doFirst {
        manifest {
            attributes "Class-Path": configurations.docerina.files.collect {
                it.toURL().toString().replaceFirst("file:/", "/")
            }.join(' ')
        }
    }
}

task generateDocs(type: JavaExec) {
    dependsOn pathingJar
    dependsOn extractLibs
    dependsOn ':docerina-gradle-plugin:build'
    inputs.dir("$buildDir/ballerina/");
    outputs.dir("$buildDir/api-docs")
    outputs.cacheIf { true }

    systemProperty("BALLERINA_DEV_COMPILE_BALLERINA_ORG", true)
    systemProperty("BALLERINA_DEV_LOAD_BUILTIN_FROM_SOURCE", true)
    
    classpath = files(pathingJar.archivePath)
    main = 'org.ballerinalang.plugin.gradle.doc.DocerinaGen'

    def libs = "$buildDir/ballerina/"
    args("$libs", "$buildDir/api-docs")
}

task createApiDocsZip(type: Zip) {
    from generateDocs.outputs.files
    archiveName "ballerina-api-docs-${project.version}.zip"
}

task createZip(type: Zip) {
    def basePath = '/' + project.name + '-' + project.version + '/'
    with copyJarSpec(basePath)
    with copyBaloSpec(basePath)
    with copyBalxSpec(basePath)
    with copyBinSpec(basePath)
    with copyLangServerLibsSpec(basePath)
    with copyLangSeverIndexSpec(basePath)
    with copyLangServerBinSpec(basePath)
    with copyComposerDistributionSpec(basePath)
    with copyComposerFontsSpec(basePath)
    with copyBallerinaZipSpec(basePath)
    with examplesSpec(basePath)
    with apiDocsSpec(basePath)
    with copyStaticSpec(basePath)
    with copyResourceSpec(basePath)
    with copySrcBaloSpec(basePath)
}

task updateBalHome(type: Copy) {
    def installDir = ""
    with copyJarSpec(installDir)
    with copyBaloSpec(installDir)
    with copyBalxSpec(installDir)
    with copyBinSpec(installDir)
    with copyLangServerLibsSpec(installDir)
    with copyLangSeverIndexSpec(installDir)
    with copyLangServerBinSpec(installDir)
    with copyComposerDistributionSpec(installDir)
    with copyComposerFontsSpec(installDir)
    with copyBallerinaZipSpec(installDir)
    with apiDocsSpec(installDir)
    with examplesSpec(installDir)
    with copyStaticSpec(installDir)
    with copyResourceSpec(installDir)
    with copySrcBaloSpec(installDir)
    into System.getenv('BAL_HOME')
}

task createDistribution(type: Copy) {
    def filePath = "$buildDir/extracted-distributions/${project.name}-${project.version}"
    file(filePath).mkdirs()
    with copyJarSpec("")
    with copyBaloSpec("")
    with copyBalxSpec("")
    with copyBinSpec("")
    with copyLangServerLibsSpec("")
    with copyLangSeverIndexSpec("")
    with copyLangServerBinSpec("")
    with copyComposerDistributionSpec("")
    with copyComposerFontsSpec("")
    with copyBallerinaZipSpec("")
    with apiDocsSpec("")
    with examplesSpec("")
    with copyStaticSpec("")
    with copyResourceSpec("")
    with copySrcBaloSpec("")
    destinationDir=file(filePath)
}

build {
    dependsOn createZip
    dependsOn createDistribution
    // finalizedBy ':ballerina-tools-integration-test:test'
}

artifacts {
    balo configurations.distBal.files
    zip file: file("$buildDir/distributions/${project.name}-${project.version}.zip"), builtBy: createZip
    unzipped file: file("$buildDir/extracted-distributions/${project.name}-${project.version}"), builtBy: createDistribution
}

// This section makes sure that checkstyle/spotbug runs when dist is build.
project.afterEvaluate {
    configurations.dist.dependencies
        .findAll { it instanceof ProjectDependency }
        .each {
            it.dependencyProject.afterEvaluate {
                def dependencyCheck = it.tasks.find { it.name == 'check' }
                check.dependsOn dependencyCheck
            }
        }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createZip, extension: 'zip'
        }
    }
}
